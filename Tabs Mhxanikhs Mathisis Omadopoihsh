from sklearn.cluster import KMEANS, DBSCAN
from sklearn.metrics import silhouettescore

def kmeans_clustering(data):
  k = st.sidebar.slider('k', 1, 10, 3)
  kmeans = KMeans(n_clusters=k)
  clusters = kmeans.fit_predict(data.iloc[:,:-1])
  st.write(f'Cluster centers: {kmeans.cluster_centers}')
  plt.scatter(data.iloc[:,0], data.iloc[:,1], c=clusters)
  st.pyplot(plt)
  score = silhouette_score(data.iloc[:, :-1], clusters)
  st.write(f'Silhouette Score: {score:.2f}')

def dbscan_clustering(data):
  eps = st.sidebar.slider('eps', 0.1, 10.0, 0.5)
  dbscan =DBSCAN(eps=eps)
  clusters=dbscan.fit_predict(data.iloc[:,:-1])
  plt.scatter(data.iloc[:, 0}, data.iloc[:,1], c=clusters)
  st.pyplot(plt)
  if len(set(clusters)) > 1:
    score = silhouette_score(data.iloc[:,:-1], clusters)
    st.write(f'Silhouette Score:{score:.2f}')
  else:
    st.write("Silhouette Score: Not applicable (only one cluster)")
if uploaded_file is not None:
  st.header("Clustering")
  clustering_option = st.selectbox("Select a clustering algorithm",["k-means", "DBSCAN"])
  if clustering_option == "k-means":
    kmeans_clustering(data)
  elif clustering_option == "DBSCAN"
    dbscan_clustering(data)
